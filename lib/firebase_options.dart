// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:view_observer/env/env.dart';
import 'package:view_observer/env/environment.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      final env = environment;
      return env.isProd ? webPrd : webStg;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for android - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.iOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for ios - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static final FirebaseOptions webPrd = FirebaseOptions(
    apiKey: Env.firebaseApiKey,
    appId: '1:154219614987:web:77862c5ba97435c40f080e',
    messagingSenderId: '154219614987',
    projectId: 'observe-notify',
    authDomain: 'observe-notify.firebaseapp.com',
    storageBucket: 'observe-notify.appspot.com',
    measurementId: 'G-8RLTLM9MVS',
  );

  static final FirebaseOptions webStg = FirebaseOptions(
    apiKey: Env.firebaseApiKey,
    appId: '1:644139762939:web:a26c976ff95c85b453dc5e',
    messagingSenderId: '644139762939',
    projectId: 'observe-notify-stg',
    authDomain: 'observe-notify-stg.firebaseapp.com',
    storageBucket: 'observe-notify-stg.firebasestorage.app',
    measurementId: 'G-KV3PTK400V',
  );
}
