const fs = require('fs');
const path = require('path');

const controllersDir = path.join(__dirname, 'src', 'controller');
const indexPath = path.join(__dirname, 'src', 'index.ts');
const autoGeneratedMarker = "AUTO-GENERATED PART";

function hasExportStatements(filePath) {
  const fileContent = fs.readFileSync(filePath, 'utf-8');
  return /export\s+/.test(fileContent);
}

function getTsFiles(dir, rootDir = '') {
  let files = [];

  fs.readdirSync(dir).forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);

    if (stat.isDirectory()) {
      files = files.concat(getTsFiles(filePath, path.join(rootDir, file)));
    } else if (file.endsWith('.ts') && file !== 'index.ts') {
      if (hasExportStatements(filePath)) {
        files.push(path.join(rootDir, file).replace(/\.ts$/, ''));
      }
    }
  });

  return files;
}

const tsFiles = getTsFiles(controllersDir);
const autoGeneratedContent = tsFiles.map(file => `export * from "./controller/${file}";`).join('\n') + '\n';

let indexFileContent = fs.readFileSync(indexPath, 'utf-8');
const markerIndex = indexFileContent.indexOf(autoGeneratedMarker);

if (markerIndex != -1) {
  indexFileContent = indexFileContent.substring(0, markerIndex + autoGeneratedMarker.length);
}

const note = "// The content below will be overwritten!\n"
+ "// //////////////////////////////////////\n\n";
indexFileContent += '\n' + note + autoGeneratedContent + "\n"

// index.tsファイルに書き込み
fs.writeFileSync(indexPath, indexFileContent);

console.log(indexPath + ' has been generated:');
console.log(indexFileContent);
